{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI Admin Introduction fastapi-admin is a fast admin dashboard based on FastAPI and TortoiseORM with tabler ui, inspired by Django admin. Installation > pip install fastapi-admin Requirements Redis Online Demo You can check a online demo here . username: admin password: 123456 Or pro version online demo here . username: admin password: 123456 Screenshots Run examples in local Clone repo. Create .env file. DATABASE_URL=mysql://root:123456@127.0.0.1:3306/fastapi-admin REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD= REDIS_DB=0 Run docker-compose up -d --build . Visit http://localhost:8000/admin/init to create first admin. Documentation See documentation at https://fastapi-admin-docs.long2ice.cn . License This project is licensed under the Apache-2.0 License.","title":"Home"},{"location":"#fastapi-admin","text":"","title":"FastAPI Admin"},{"location":"#introduction","text":"fastapi-admin is a fast admin dashboard based on FastAPI and TortoiseORM with tabler ui, inspired by Django admin.","title":"Introduction"},{"location":"#installation","text":"> pip install fastapi-admin","title":"Installation"},{"location":"#requirements","text":"Redis","title":"Requirements"},{"location":"#online-demo","text":"You can check a online demo here . username: admin password: 123456 Or pro version online demo here . username: admin password: 123456","title":"Online Demo"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#run-examples-in-local","text":"Clone repo. Create .env file. DATABASE_URL=mysql://root:123456@127.0.0.1:3306/fastapi-admin REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD= REDIS_DB=0 Run docker-compose up -d --build . Visit http://localhost:8000/admin/init to create first admin.","title":"Run examples in local"},{"location":"#documentation","text":"See documentation at https://fastapi-admin-docs.long2ice.cn .","title":"Documentation"},{"location":"#license","text":"This project is licensed under the Apache-2.0 License.","title":"License"},{"location":"custom/action/","text":"Extra Actions","title":"Extra Actions"},{"location":"custom/action/#extra-actions","text":"","title":"Extra Actions"},{"location":"custom/file_upload/","text":"File Upload","title":"File Upload"},{"location":"custom/file_upload/#file-upload","text":"","title":"File Upload"},{"location":"custom/overwrite/","text":"Override builtin pages and widgets If you want override the builtin pages and widgets template, you can create a template in your own template folders same path as the builtin. For example, the path of builtin layout template is templates/layout.html , you can create a template also named layout.html and put it in your template folders. The easiest way to override is just to copy the builtin template content then modify the content yourself.","title":"Override builtin pages and widgets"},{"location":"custom/overwrite/#override-builtin-pages-and-widgets","text":"If you want override the builtin pages and widgets template, you can create a template in your own template folders same path as the builtin. For example, the path of builtin layout template is templates/layout.html , you can create a template also named layout.html and put it in your template folders. The easiest way to override is just to copy the builtin template content then modify the content yourself.","title":"Override builtin pages and widgets"},{"location":"custom/page/","text":"Custom Page It is easy to create custom pages. Template folders You should configure your template folders when configure fastapi-admin . from fastapi import FastAPI from fastapi_admin.app import app as admin_app app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( template_folders = [ \"templates\" ]) Write router Then write a router to render the template. If you want you page can access only after login, you need use get_current_admin dependency. from fastapi_admin.app import app as admin_app from fastapi_admin.template import templates from starlette.requests import Request from fastapi import Depends from fastapi_admin.depends import get_current_admin @admin_app . get ( \"/\" , dependencies = [ Depends ( get_current_admin )]) async def home ( request : Request ): return templates . TemplateResponse ( \"dashboard.html\" , context = { \"request\" : request }) Don't forget to create the template dashboard.html and write content. Register resource Finally, register it as a Link resource. from fastapi_admin.app import app as admin_app from fastapi_admin.resources import Link @admin_app . register class Dashboard ( Link ): label = \"Dashboard\" icon = \"fas fa-home\" url = \"/admin\" That's all, if you are a superuser, you can see a menu in navbar now, otherwise you need give the admin permission of the resource.","title":"Custom Page"},{"location":"custom/page/#custom-page","text":"It is easy to create custom pages.","title":"Custom Page"},{"location":"custom/page/#template-folders","text":"You should configure your template folders when configure fastapi-admin . from fastapi import FastAPI from fastapi_admin.app import app as admin_app app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( template_folders = [ \"templates\" ])","title":"Template folders"},{"location":"custom/page/#write-router","text":"Then write a router to render the template. If you want you page can access only after login, you need use get_current_admin dependency. from fastapi_admin.app import app as admin_app from fastapi_admin.template import templates from starlette.requests import Request from fastapi import Depends from fastapi_admin.depends import get_current_admin @admin_app . get ( \"/\" , dependencies = [ Depends ( get_current_admin )]) async def home ( request : Request ): return templates . TemplateResponse ( \"dashboard.html\" , context = { \"request\" : request }) Don't forget to create the template dashboard.html and write content.","title":"Write router"},{"location":"custom/page/#register-resource","text":"Finally, register it as a Link resource. from fastapi_admin.app import app as admin_app from fastapi_admin.resources import Link @admin_app . register class Dashboard ( Link ): label = \"Dashboard\" icon = \"fas fa-home\" url = \"/admin\" That's all, if you are a superuser, you can see a menu in navbar now, otherwise you need give the admin permission of the resource.","title":"Register resource"},{"location":"custom/provider/","text":"Provider SearchProvider OAuth2Provider","title":"Provider"},{"location":"custom/provider/#provider","text":"","title":"Provider"},{"location":"custom/provider/#searchprovider","text":"","title":"SearchProvider"},{"location":"custom/provider/#oauth2provider","text":"","title":"OAuth2Provider"},{"location":"custom/widget/","text":"Widget","title":"Widget"},{"location":"custom/widget/#widget","text":"","title":"Widget"},{"location":"getting_started/installation/","text":"Installation From pypi You can install from pypi. > pip install fastapi-admin From source Or you can install from source with the latest code. > pip install git+https://github.com/fastapi-admin/fastapi-admin.git With requirements.txt Add the following line. -e https://github.com/fastapi-admin/fastapi-admin.git#egg=fastapi-admin With poetry Add the following line in section [tool.poetry.dependencies] . fastapi-admin = { git = 'https://github.com/fastapi-admin/fastapi-admin.git' }","title":"Installation"},{"location":"getting_started/installation/#installation","text":"","title":"Installation"},{"location":"getting_started/installation/#from-pypi","text":"You can install from pypi. > pip install fastapi-admin","title":"From pypi"},{"location":"getting_started/installation/#from-source","text":"Or you can install from source with the latest code. > pip install git+https://github.com/fastapi-admin/fastapi-admin.git","title":"From source"},{"location":"getting_started/installation/#with-requirementstxt","text":"Add the following line. -e https://github.com/fastapi-admin/fastapi-admin.git#egg=fastapi-admin","title":"With requirements.txt"},{"location":"getting_started/installation/#with-poetry","text":"Add the following line in section [tool.poetry.dependencies] . fastapi-admin = { git = 'https://github.com/fastapi-admin/fastapi-admin.git' }","title":"With poetry"},{"location":"getting_started/quick_start/","text":"Quick Start FastAPI-Admin is easy to mount your FastAPI app, just need a few configs. Mount Admin App First, you need mount the admin app from FastAPI-Admin as a sub application of FastAPI . from fastapi_admin.app import app as admin_app from fastapi import FastAPI app = FastAPI () app . mount ( \"/admin\" , admin_app ) Configure Admin App There are some configs to configure the admin app, and you need to configure it on startup of FastAPI . from fastapi_admin.app import app as admin_app from fastapi_admin.providers.login import UsernamePasswordProvider from examples.models import Admin import aioredis from fastapi import FastAPI login_provider = UsernamePasswordProvider ( admin_model = Admin , enable_captcha = True , login_logo_url = \"https://preview.tabler.io/static/logo.svg\" ) app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): redis = await aioredis . create_redis_pool ( \"redis://localhost\" , encoding = \"utf8\" ) admin_app . configure ( logo_url = \"https://preview.tabler.io/static/logo-white.svg\" , template_folders = [ os . path . join ( BASE_DIR , \"templates\" )], providers = [ login_provider ], redis = redis , ) The full list of configs and detail can be found in Configuration . Define And Register Resource There are three kinds of resources, which are Link , Model , and Dropdown . Link The Link will display a menu in sidebar with custom page or third page. from fastapi_admin.app import app from fastapi_admin.resources import Link @app . register class Home ( Link ): label = \"Home\" icon = \"fas fa-home\" url = \"/admin\" Model Field The Field is used in Model resource to define how to display and input every field in model page. The Model make a TortoiseORM model as a menu with CURD page. from examples.models import Admin from fastapi_admin.app import app from fastapi_admin.file_upload import FileUpload from fastapi_admin.resources import Field , Model from fastapi_admin.widgets import displays , filters , inputs upload = FileUpload ( uploads = os . path . join ( BASE_DIR , \"static\" , \"uploads\" )) @app . register class AdminResource ( Model ): label = \"Admin\" model = Admin icon = \"fas fa-user\" page_pre_title = \"admin list\" page_title = \"admin model\" filters = [ filters . Search ( name = \"username\" , label = \"Name\" , search_mode = \"contains\" , placeholder = \"Search for username\" ), filters . Date ( name = \"created_at\" , label = \"CreatedAt\" ), ] fields = [ \"id\" , \"username\" , Field ( name = \"password\" , label = \"Password\" , display = displays . InputOnly (), input_ = inputs . Password (), ), Field ( name = \"email\" , label = \"Email\" , input_ = inputs . Email ()), Field ( name = \"avatar\" , label = \"Avatar\" , display = displays . Image ( width = \"40\" ), input_ = inputs . Image ( null = True , upload = upload ), ), \"created_at\" , ] Dropdown The Dropdown can contains both Link and Model , which can be nested. from examples import enums from examples.models import Category , Product from fastapi_admin.app import app from fastapi_admin.resources import Dropdown , Field , Model from fastapi_admin.widgets import displays , filters @app . register class Content ( Dropdown ): class CategoryResource ( Model ): label = \"Category\" model = Category fields = [ \"id\" , \"name\" , \"slug\" , \"created_at\" ] class ProductResource ( Model ): label = \"Product\" model = Product filters = [ filters . Enum ( enum = enums . ProductType , name = \"type\" , label = \"ProductType\" ), filters . Datetime ( name = \"created_at\" , label = \"CreatedAt\" ), ] fields = [ \"id\" , \"name\" , \"view_num\" , \"sort\" , \"is_reviewed\" , \"type\" , Field ( name = \"image\" , label = \"Image\" , display = displays . Image ( width = \"40\" )), \"body\" , \"created_at\" , ] label = \"Content\" icon = \"fas fa-bars\" resources = [ ProductResource , CategoryResource ] What's next? That's all, you can run your app now. For more reference you can see Reference . Or you can see full examples .","title":"Quick Start"},{"location":"getting_started/quick_start/#quick-start","text":"FastAPI-Admin is easy to mount your FastAPI app, just need a few configs.","title":"Quick Start"},{"location":"getting_started/quick_start/#mount-admin-app","text":"First, you need mount the admin app from FastAPI-Admin as a sub application of FastAPI . from fastapi_admin.app import app as admin_app from fastapi import FastAPI app = FastAPI () app . mount ( \"/admin\" , admin_app )","title":"Mount Admin App"},{"location":"getting_started/quick_start/#configure-admin-app","text":"There are some configs to configure the admin app, and you need to configure it on startup of FastAPI . from fastapi_admin.app import app as admin_app from fastapi_admin.providers.login import UsernamePasswordProvider from examples.models import Admin import aioredis from fastapi import FastAPI login_provider = UsernamePasswordProvider ( admin_model = Admin , enable_captcha = True , login_logo_url = \"https://preview.tabler.io/static/logo.svg\" ) app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): redis = await aioredis . create_redis_pool ( \"redis://localhost\" , encoding = \"utf8\" ) admin_app . configure ( logo_url = \"https://preview.tabler.io/static/logo-white.svg\" , template_folders = [ os . path . join ( BASE_DIR , \"templates\" )], providers = [ login_provider ], redis = redis , ) The full list of configs and detail can be found in Configuration .","title":"Configure Admin App"},{"location":"getting_started/quick_start/#define-and-register-resource","text":"There are three kinds of resources, which are Link , Model , and Dropdown .","title":"Define And Register Resource"},{"location":"getting_started/quick_start/#link","text":"The Link will display a menu in sidebar with custom page or third page. from fastapi_admin.app import app from fastapi_admin.resources import Link @app . register class Home ( Link ): label = \"Home\" icon = \"fas fa-home\" url = \"/admin\"","title":"Link"},{"location":"getting_started/quick_start/#model","text":"","title":"Model"},{"location":"getting_started/quick_start/#field","text":"The Field is used in Model resource to define how to display and input every field in model page. The Model make a TortoiseORM model as a menu with CURD page. from examples.models import Admin from fastapi_admin.app import app from fastapi_admin.file_upload import FileUpload from fastapi_admin.resources import Field , Model from fastapi_admin.widgets import displays , filters , inputs upload = FileUpload ( uploads = os . path . join ( BASE_DIR , \"static\" , \"uploads\" )) @app . register class AdminResource ( Model ): label = \"Admin\" model = Admin icon = \"fas fa-user\" page_pre_title = \"admin list\" page_title = \"admin model\" filters = [ filters . Search ( name = \"username\" , label = \"Name\" , search_mode = \"contains\" , placeholder = \"Search for username\" ), filters . Date ( name = \"created_at\" , label = \"CreatedAt\" ), ] fields = [ \"id\" , \"username\" , Field ( name = \"password\" , label = \"Password\" , display = displays . InputOnly (), input_ = inputs . Password (), ), Field ( name = \"email\" , label = \"Email\" , input_ = inputs . Email ()), Field ( name = \"avatar\" , label = \"Avatar\" , display = displays . Image ( width = \"40\" ), input_ = inputs . Image ( null = True , upload = upload ), ), \"created_at\" , ]","title":"Field"},{"location":"getting_started/quick_start/#dropdown","text":"The Dropdown can contains both Link and Model , which can be nested. from examples import enums from examples.models import Category , Product from fastapi_admin.app import app from fastapi_admin.resources import Dropdown , Field , Model from fastapi_admin.widgets import displays , filters @app . register class Content ( Dropdown ): class CategoryResource ( Model ): label = \"Category\" model = Category fields = [ \"id\" , \"name\" , \"slug\" , \"created_at\" ] class ProductResource ( Model ): label = \"Product\" model = Product filters = [ filters . Enum ( enum = enums . ProductType , name = \"type\" , label = \"ProductType\" ), filters . Datetime ( name = \"created_at\" , label = \"CreatedAt\" ), ] fields = [ \"id\" , \"name\" , \"view_num\" , \"sort\" , \"is_reviewed\" , \"type\" , Field ( name = \"image\" , label = \"Image\" , display = displays . Image ( width = \"40\" )), \"body\" , \"created_at\" , ] label = \"Content\" icon = \"fas fa-bars\" resources = [ ProductResource , CategoryResource ]","title":"Dropdown"},{"location":"getting_started/quick_start/#whats-next","text":"That's all, you can run your app now. For more reference you can see Reference . Or you can see full examples .","title":"What's next?"},{"location":"pro/exclusive/","text":"Exclusive content Login Captcha You can set captcha in admin login page, just set enable_captcha=True . login_provider = UsernamePasswordProvider ( user_model = User , enable_captcha = True ) Google Recaptcha V2 In addition to captcha, you can also use Google Recaptcha V2 to protect your site. The GoogleRecaptcha schema: class GoogleRecaptcha ( BaseModel ): cdn_url : str = \"https://www.google.com/recaptcha/api.js\" verify_url : str = \"https://www.google.com/recaptcha/api/siteverify\" site_key : str secret : str Just set google_recaptcha in login provider. from fastapi_admin.providers.login import GoogleRecaptcha await admin_app . configure ( providers = [ LoginProvider ( google_recaptcha = GoogleRecaptcha ( site_key = settings . GOOGLE_RECAPTCHA_SITE_KEY , secret = settings . GOOGLE_RECAPTCHA_SECRET , ), ), ] ) Failed Login IP Limitation If you want limit login failed ip with error password, you can use LoginPasswordMaxTryMiddleware . admin_app . add_middleware ( BaseHTTPMiddleware , dispatch = LoginPasswordMaxTryMiddleware ( max_times = 3 , after_seconds = 360 )) Permission Control PermissionProvider allow you to configure the access control for resources of admin users with permissions read / create / update / delete . Additional File Upload ALiYunOSS File upload for ALiYunOSS. AwsS3 File upload for AWS S3. Maintenance If your site is in maintenance, you can set true to admin_app.configure(...) . await admin_app . configure ( maintenance = True ) Admin Log If you want to log all create/update/delete actions, you can add AdminLogProvider to admin_app.configure(...) . await admin_app . configure ( providers = [ AdminLogProvider ( Log )]) Site Search You can enable site search by add SearchProvider to admin_app.configure(...) . await admin_app . configure ( providers = [ SearchProvider ()]) Notification You can use notification by adding NotificationProvider to `admin_app.configure(...) implement by websocket. await admin_app . configure ( providers = [ NotificationProvider ()]) OAuth2 Current there are two builtin oauth2 implementations GitHubOAuth2Provider and GoogleOAuth2Provider . await admin_app . configure ( providers = [ GitHubProvider ( Admin , settings . GITHUB_CLIENT_ID , settings . GITHUB_CLIENT_SECRET ), GoogleProvider ( Admin , settings . GOOGLE_CLIENT_ID , settings . GOOGLE_CLIENT_SECRET , redirect_uri = \"https://fastapi-admin-pro.long2ice.cn/admin/oauth2/google_oauth2_provider\" , ), ] )","title":"Exclusive content"},{"location":"pro/exclusive/#exclusive-content","text":"","title":"Exclusive content"},{"location":"pro/exclusive/#login-captcha","text":"You can set captcha in admin login page, just set enable_captcha=True . login_provider = UsernamePasswordProvider ( user_model = User , enable_captcha = True )","title":"Login Captcha"},{"location":"pro/exclusive/#google-recaptcha-v2","text":"In addition to captcha, you can also use Google Recaptcha V2 to protect your site. The GoogleRecaptcha schema: class GoogleRecaptcha ( BaseModel ): cdn_url : str = \"https://www.google.com/recaptcha/api.js\" verify_url : str = \"https://www.google.com/recaptcha/api/siteverify\" site_key : str secret : str Just set google_recaptcha in login provider. from fastapi_admin.providers.login import GoogleRecaptcha await admin_app . configure ( providers = [ LoginProvider ( google_recaptcha = GoogleRecaptcha ( site_key = settings . GOOGLE_RECAPTCHA_SITE_KEY , secret = settings . GOOGLE_RECAPTCHA_SECRET , ), ), ] )","title":"Google Recaptcha V2"},{"location":"pro/exclusive/#failed-login-ip-limitation","text":"If you want limit login failed ip with error password, you can use LoginPasswordMaxTryMiddleware . admin_app . add_middleware ( BaseHTTPMiddleware , dispatch = LoginPasswordMaxTryMiddleware ( max_times = 3 , after_seconds = 360 ))","title":"Failed Login IP Limitation"},{"location":"pro/exclusive/#permission-control","text":"PermissionProvider allow you to configure the access control for resources of admin users with permissions read / create / update / delete .","title":"Permission Control"},{"location":"pro/exclusive/#additional-file-upload","text":"","title":"Additional File Upload"},{"location":"pro/exclusive/#aliyunoss","text":"File upload for ALiYunOSS.","title":"ALiYunOSS"},{"location":"pro/exclusive/#awss3","text":"File upload for AWS S3.","title":"AwsS3"},{"location":"pro/exclusive/#maintenance","text":"If your site is in maintenance, you can set true to admin_app.configure(...) . await admin_app . configure ( maintenance = True )","title":"Maintenance"},{"location":"pro/exclusive/#admin-log","text":"If you want to log all create/update/delete actions, you can add AdminLogProvider to admin_app.configure(...) . await admin_app . configure ( providers = [ AdminLogProvider ( Log )])","title":"Admin Log"},{"location":"pro/exclusive/#site-search","text":"You can enable site search by add SearchProvider to admin_app.configure(...) . await admin_app . configure ( providers = [ SearchProvider ()])","title":"Site Search"},{"location":"pro/exclusive/#notification","text":"You can use notification by adding NotificationProvider to `admin_app.configure(...) implement by websocket. await admin_app . configure ( providers = [ NotificationProvider ()])","title":"Notification"},{"location":"pro/exclusive/#oauth2","text":"Current there are two builtin oauth2 implementations GitHubOAuth2Provider and GoogleOAuth2Provider . await admin_app . configure ( providers = [ GitHubProvider ( Admin , settings . GITHUB_CLIENT_ID , settings . GITHUB_CLIENT_SECRET ), GoogleProvider ( Admin , settings . GOOGLE_CLIENT_ID , settings . GOOGLE_CLIENT_SECRET , redirect_uri = \"https://fastapi-admin-pro.long2ice.cn/admin/oauth2/google_oauth2_provider\" , ), ] )","title":"OAuth2"},{"location":"pro/installation/","text":"Installation Because pro version won't publish to pypi, so you can't install from it. Requirements In order to access the repository programmatically (from the command line or GitHub Actions workflows), you need to create a personal access token: Go to https://github.com/settings/tokens . Click on Generate a new token. Enter a name and select the repo scope. Generate the token and store it in a safe place. With pip > pip install git+https:// ${ GH_TOKEN } @github.com/fastapi-admin/fastapi-admin-pro.git With poetry Add the following line in section [tool.poetry.dependencies] . fastapi-admin-pro = { git = 'https://${GH_TOKEN}@github.com/fastapi-admin/fastapi-admin-pro.git' } In requirements.txt Add the following line. -e https:// ${ GH_TOKEN } @github.com/fastapi-admin/fastapi-admin-pro.git#egg = fastapi-admin-pro","title":"Installation"},{"location":"pro/installation/#installation","text":"Because pro version won't publish to pypi, so you can't install from it.","title":"Installation"},{"location":"pro/installation/#requirements","text":"In order to access the repository programmatically (from the command line or GitHub Actions workflows), you need to create a personal access token: Go to https://github.com/settings/tokens . Click on Generate a new token. Enter a name and select the repo scope. Generate the token and store it in a safe place.","title":"Requirements"},{"location":"pro/installation/#with-pip","text":"> pip install git+https:// ${ GH_TOKEN } @github.com/fastapi-admin/fastapi-admin-pro.git","title":"With pip"},{"location":"pro/installation/#with-poetry","text":"Add the following line in section [tool.poetry.dependencies] . fastapi-admin-pro = { git = 'https://${GH_TOKEN}@github.com/fastapi-admin/fastapi-admin-pro.git' }","title":"With poetry"},{"location":"pro/installation/#in-requirementstxt","text":"Add the following line. -e https:// ${ GH_TOKEN } @github.com/fastapi-admin/fastapi-admin-pro.git#egg = fastapi-admin-pro","title":"In requirements.txt"},{"location":"pro/sponsor/","text":"Sponsor The pro version is just for the sponsors. As a sponsor, you will be invited to fastapi-admin organization as an outside collaborator with readonly access , and you can get the pro features and get updates for a time. How to become a sponsor Sponsor Link: https://sponsor.long2ice.cn You can choose any sponsor way you like. After sponsor, you can email me long2ice@gmail.com with your GitHub account and sponsor way and account, then I will invite you to join fastapi-admin organization. Levels $18 - Month You will be invited and keep collaborator role for a month. $58 - Half a Year You will be invited and keep collaborator role for half a year. $98 - Year You will be invited and keep collaborator role for a year. Licence After you have be invited, you can read and clone and develop yourself, but please don't distribute the source code of pro version. Thanks!","title":"Sponsor"},{"location":"pro/sponsor/#sponsor","text":"The pro version is just for the sponsors. As a sponsor, you will be invited to fastapi-admin organization as an outside collaborator with readonly access , and you can get the pro features and get updates for a time.","title":"Sponsor"},{"location":"pro/sponsor/#how-to-become-a-sponsor","text":"Sponsor Link: https://sponsor.long2ice.cn You can choose any sponsor way you like. After sponsor, you can email me long2ice@gmail.com with your GitHub account and sponsor way and account, then I will invite you to join fastapi-admin organization.","title":"How to become a sponsor"},{"location":"pro/sponsor/#levels","text":"","title":"Levels"},{"location":"pro/sponsor/#18-month","text":"You will be invited and keep collaborator role for a month.","title":"$18 - Month"},{"location":"pro/sponsor/#58-half-a-year","text":"You will be invited and keep collaborator role for half a year.","title":"$58 - Half a Year"},{"location":"pro/sponsor/#98-year","text":"You will be invited and keep collaborator role for a year.","title":"$98 - Year"},{"location":"pro/sponsor/#licence","text":"After you have be invited, you can read and clone and develop yourself, but please don't distribute the source code of pro version. Thanks!","title":"Licence"},{"location":"pro/support/","text":"Support Whenever you have any questions, you can open issues in fastapi-admin-pro repository for help, I will answer your questions as soon as possible. Feature request As sponsor, you can make feature request here , and I will consider to implement it. Paid features If you want any features which pro version is not available, you can choose payment, and I can work that for you.","title":"Support"},{"location":"pro/support/#support","text":"Whenever you have any questions, you can open issues in fastapi-admin-pro repository for help, I will answer your questions as soon as possible.","title":"Support"},{"location":"pro/support/#feature-request","text":"As sponsor, you can make feature request here , and I will consider to implement it.","title":"Feature request"},{"location":"pro/support/#paid-features","text":"If you want any features which pro version is not available, you can choose payment, and I can work that for you.","title":"Paid features"},{"location":"pro/upgrade/","text":"Upgrade from the open source version It's so easy to upgrade fastapi-admin open source version to pro version, because pro version contains all of open source and has same project structure. Uninstall open source version. > pip uninstall fastapi-admin Install pro version. > pip install git+https:// ${ GH_TOKEN } @github.com/fastapi-admin/fastapi-admin-pro.git That's all, then you can add pro version exclusive content yourself without any code change. And you can also see the pro version examples for reference.","title":"Upgrade from the open source version"},{"location":"pro/upgrade/#upgrade-from-the-open-source-version","text":"It's so easy to upgrade fastapi-admin open source version to pro version, because pro version contains all of open source and has same project structure. Uninstall open source version. > pip uninstall fastapi-admin Install pro version. > pip install git+https:// ${ GH_TOKEN } @github.com/fastapi-admin/fastapi-admin-pro.git That's all, then you can add pro version exclusive content yourself without any code change. And you can also see the pro version examples for reference.","title":"Upgrade from the open source version"},{"location":"reference/","text":"Configuration You should configure predefined app from fastapi-admin on startup event of fastapi , because which should be in asyncio loop context. import aioredis from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.login import UsernamePasswordProvider from examples.models import Admin app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): redis = await aioredis . create_redis_pool ( address = 'redis://localhost' ) await admin_app . configure ( logo_url = \"https://preview.tabler.io/static/logo-white.svg\" , template_folders = [ \"templates\" ], providers = [ UsernamePasswordProvider ( login_logo_url = \"https://preview.tabler.io/static/logo.svg\" , admin_model = Admin ) ], redis = redis , ) Parameters logo_url : Will show the logo image in admin dashboard. admin_path : Default is /admin , but you can change to other path. maintenance : If set to true , all pages will be redirected to the /maintenance page. (\ud83d\udc97 Pro only) redis : Instance of aioredis . default_locale : Current support zh_CN and en_US , default is en_US . template_folders : Template folders registered to jinja2 and also can be used to override builtin templates. providers : List of providers to register, all are subclasses of fastapi_admin.providers.Provider . language_switch : Whether show a language switch in page, default is True . default_layout : Set default layout, current there are both layouts layout.html and layout-navbar.html , default is layout.html . (\ud83d\udc97 Pro only)","title":"Configuration"},{"location":"reference/#configuration","text":"You should configure predefined app from fastapi-admin on startup event of fastapi , because which should be in asyncio loop context. import aioredis from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.login import UsernamePasswordProvider from examples.models import Admin app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): redis = await aioredis . create_redis_pool ( address = 'redis://localhost' ) await admin_app . configure ( logo_url = \"https://preview.tabler.io/static/logo-white.svg\" , template_folders = [ \"templates\" ], providers = [ UsernamePasswordProvider ( login_logo_url = \"https://preview.tabler.io/static/logo.svg\" , admin_model = Admin ) ], redis = redis , )","title":"Configuration"},{"location":"reference/#parameters","text":"logo_url : Will show the logo image in admin dashboard. admin_path : Default is /admin , but you can change to other path. maintenance : If set to true , all pages will be redirected to the /maintenance page. (\ud83d\udc97 Pro only) redis : Instance of aioredis . default_locale : Current support zh_CN and en_US , default is en_US . template_folders : Template folders registered to jinja2 and also can be used to override builtin templates. providers : List of providers to register, all are subclasses of fastapi_admin.providers.Provider . language_switch : Whether show a language switch in page, default is True . default_layout : Set default layout, current there are both layouts layout.html and layout-navbar.html , default is layout.html . (\ud83d\udc97 Pro only)","title":"Parameters"},{"location":"reference/admin_log/","text":"Admin Log (\ud83d\udc97 Pro only) You can enable log all actions by using the AdminLogProvider . You should just add the AdminLogProvider to providers. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.admin_log import AdminLogProvider from examples.models import Log app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ AdminLogProvider ( Log )] ) The Log model is subclass of fastapi_admin.models.AbstractLog . class AbstractLog ( Model ): admin = fields . ForeignKeyField ( \"models.Admin\" ) content = fields . JSONField () resource = fields . CharField ( max_length = 50 ) action = fields . CharEnumField ( enums . Action , default = enums . Action . create ) created_at = fields . DatetimeField ( auto_now_add = True ) class Meta : abstract = True ordering = [ \"-id\" ]","title":"Admin Log (\ud83d\udc97 Pro only)"},{"location":"reference/admin_log/#admin-log-pro-only","text":"You can enable log all actions by using the AdminLogProvider . You should just add the AdminLogProvider to providers. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.admin_log import AdminLogProvider from examples.models import Log app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ AdminLogProvider ( Log )] ) The Log model is subclass of fastapi_admin.models.AbstractLog . class AbstractLog ( Model ): admin = fields . ForeignKeyField ( \"models.Admin\" ) content = fields . JSONField () resource = fields . CharField ( max_length = 50 ) action = fields . CharEnumField ( enums . Action , default = enums . Action . create ) created_at = fields . DatetimeField ( auto_now_add = True ) class Meta : abstract = True ordering = [ \"-id\" ]","title":"Admin Log (\ud83d\udc97 Pro only)"},{"location":"reference/errors/","text":"Error Pages fastapi-admin can catch all 403 , 404 , 500 errors and redirect to builtin error pages. To enable that, you should use add_exception_handler . from fastapi_admin.exceptions import forbidden_error_exception , not_found_error_exception , server_error_exception from starlette.status import HTTP_403_FORBIDDEN , HTTP_404_NOT_FOUND , HTTP_500_INTERNAL_SERVER_ERROR admin_app . add_exception_handler ( HTTP_500_INTERNAL_SERVER_ERROR , server_error_exception ) admin_app . add_exception_handler ( HTTP_404_NOT_FOUND , not_found_error_exception ) admin_app . add_exception_handler ( HTTP_403_FORBIDDEN , forbidden_error_exception )","title":"Error Pages"},{"location":"reference/errors/#error-pages","text":"fastapi-admin can catch all 403 , 404 , 500 errors and redirect to builtin error pages. To enable that, you should use add_exception_handler . from fastapi_admin.exceptions import forbidden_error_exception , not_found_error_exception , server_error_exception from starlette.status import HTTP_403_FORBIDDEN , HTTP_404_NOT_FOUND , HTTP_500_INTERNAL_SERVER_ERROR admin_app . add_exception_handler ( HTTP_500_INTERNAL_SERVER_ERROR , server_error_exception ) admin_app . add_exception_handler ( HTTP_404_NOT_FOUND , not_found_error_exception ) admin_app . add_exception_handler ( HTTP_403_FORBIDDEN , forbidden_error_exception )","title":"Error Pages"},{"location":"reference/file_upload/","text":"File Upload FileUpload fastapi_admin.file_upload.FileUpload FileUpload is used in file input widget. upload = FileUpload ( uploads_dir = os . path . join ( BASE_DIR , \"static\" , \"uploads\" )) @app . register class AdminResource ( Model ): fields = [ Field ( name = \"avatar\" , label = \"Avatar\" , display = displays . Image ( width = \"40\" ), input_ = inputs . Image ( null = True , upload = upload ), ), ] Parameters uploads_dir : File upload directory. allow_extensions : Alow extensions list, default allow all extensions. max_size : Max size allow of file upload. filename_generator : Filename generator Callable , which param type passed is starlette.datastructures.UploadFile . ALiYunOSS (\ud83d\udc97 Pro only) fastapi_admin.file_upload.ALiYunOSS See https://help.aliyun.com/product/31815.html Parameters access_key : Access key of aliyun. access_key_secret : Access ket secret of aliyun. bucket : Bucket name of aliyun oss. endpoint : Endpoint of aliyun oss. AwsS3 (\ud83d\udc97 Pro only) fastapi_admin.file_upload.AwsS3 See https://aws.amazon.com/s3 Parameters access_key : Access key of aws. access_key_secret : Access ket secret of aws. bucket : Bucket name of aws. region_name : Regin name of aws.","title":"File Upload"},{"location":"reference/file_upload/#file-upload","text":"","title":"File Upload"},{"location":"reference/file_upload/#fileupload","text":"fastapi_admin.file_upload.FileUpload FileUpload is used in file input widget. upload = FileUpload ( uploads_dir = os . path . join ( BASE_DIR , \"static\" , \"uploads\" )) @app . register class AdminResource ( Model ): fields = [ Field ( name = \"avatar\" , label = \"Avatar\" , display = displays . Image ( width = \"40\" ), input_ = inputs . Image ( null = True , upload = upload ), ), ]","title":"FileUpload"},{"location":"reference/file_upload/#parameters","text":"uploads_dir : File upload directory. allow_extensions : Alow extensions list, default allow all extensions. max_size : Max size allow of file upload. filename_generator : Filename generator Callable , which param type passed is starlette.datastructures.UploadFile .","title":"Parameters"},{"location":"reference/file_upload/#aliyunoss-pro-only","text":"fastapi_admin.file_upload.ALiYunOSS See https://help.aliyun.com/product/31815.html","title":"ALiYunOSS (\ud83d\udc97 Pro only)"},{"location":"reference/file_upload/#parameters_1","text":"access_key : Access key of aliyun. access_key_secret : Access ket secret of aliyun. bucket : Bucket name of aliyun oss. endpoint : Endpoint of aliyun oss.","title":"Parameters"},{"location":"reference/file_upload/#awss3-pro-only","text":"fastapi_admin.file_upload.AwsS3 See https://aws.amazon.com/s3","title":"AwsS3 (\ud83d\udc97 Pro only)"},{"location":"reference/file_upload/#parameters_2","text":"access_key : Access key of aws. access_key_secret : Access ket secret of aws. bucket : Bucket name of aws. region_name : Regin name of aws.","title":"Parameters"},{"location":"reference/global_search/","text":"Global Search (\ud83d\udc97 Pro only) You can enable site search by add SearchProvider to admin_app.configure(...) . from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.search import SearchProvider app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ SearchProvider ()] ) The builtin search provider can search for the all available resources by resource name.","title":"Global Search (\ud83d\udc97 Pro only)"},{"location":"reference/global_search/#global-search-pro-only","text":"You can enable site search by add SearchProvider to admin_app.configure(...) . from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.search import SearchProvider app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ SearchProvider ()] ) The builtin search provider can search for the all available resources by resource name.","title":"Global Search (\ud83d\udc97 Pro only)"},{"location":"reference/login/","text":"Login Uername and password There is a builtin UsernamePasswordProvider , if you want to enable it, you need add in to providers. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.login import UsernamePasswordProvider from examples.models import Admin app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ LoginProvider ( login_logo_url = \"https://preview.tabler.io/static/logo.svg\" , admin_model = Admin , ) ] ) Then admin can login with username and password . OAuth2 (\ud83d\udc97 Pro only) If want admin login with oauth2 method, such as GitHub or Google , you can use OAuth2Provider . Current there are two builtin providers, GitHubOAuth2Provider and GoogleOAuth2Provider . from fastapi import FastAPI from fastapi_admin.app import app as admin_app from examples.providers import GitHubProvider , GoogleProvider , LoginProvider from examples.models import Admin app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ GitHubProvider ( Admin , settings . GITHUB_CLIENT_ID , settings . GITHUB_CLIENT_SECRET ), GoogleProvider ( Admin , settings . GOOGLE_CLIENT_ID , settings . GOOGLE_CLIENT_SECRET , redirect_uri = \"https://fastapi-admin-pro.long2ice.cn/admin/oauth2/google_oauth2_provider\" , ), ] ) If you want custom oauth2 provider, just inherit fastapi_admin.providers.login.OAuth2Provider and implement its methods. And the redirect_uri format is {server_url}/{admin_path}/oauth2/{provider_name} .","title":"Login"},{"location":"reference/login/#login","text":"","title":"Login"},{"location":"reference/login/#uername-and-password","text":"There is a builtin UsernamePasswordProvider , if you want to enable it, you need add in to providers. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.login import UsernamePasswordProvider from examples.models import Admin app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ LoginProvider ( login_logo_url = \"https://preview.tabler.io/static/logo.svg\" , admin_model = Admin , ) ] ) Then admin can login with username and password .","title":"Uername and password"},{"location":"reference/login/#oauth2-pro-only","text":"If want admin login with oauth2 method, such as GitHub or Google , you can use OAuth2Provider . Current there are two builtin providers, GitHubOAuth2Provider and GoogleOAuth2Provider . from fastapi import FastAPI from fastapi_admin.app import app as admin_app from examples.providers import GitHubProvider , GoogleProvider , LoginProvider from examples.models import Admin app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ GitHubProvider ( Admin , settings . GITHUB_CLIENT_ID , settings . GITHUB_CLIENT_SECRET ), GoogleProvider ( Admin , settings . GOOGLE_CLIENT_ID , settings . GOOGLE_CLIENT_SECRET , redirect_uri = \"https://fastapi-admin-pro.long2ice.cn/admin/oauth2/google_oauth2_provider\" , ), ] ) If you want custom oauth2 provider, just inherit fastapi_admin.providers.login.OAuth2Provider and implement its methods. And the redirect_uri format is {server_url}/{admin_path}/oauth2/{provider_name} .","title":"OAuth2  (\ud83d\udc97 Pro only)"},{"location":"reference/middleware/","text":"Middleware LoginPasswordMaxTryMiddleware (\ud83d\udc97 Pro only) If you want limit login failed ip with error password, you can use LoginPasswordMaxTryMiddleware . from starlette.middleware.base import BaseHTTPMiddleware from fastapi_admin import middlewares from fastapi_admin.app import app as admin_app admin_app . add_middleware ( BaseHTTPMiddleware , dispatch = middlewares . LoginPasswordMaxTryMiddleware ( max_times = 3 , after_seconds = 3600 )) After that, user can try max 3 times password, if all failed, the ip will be limited 3600 seconds.","title":"Middleware"},{"location":"reference/middleware/#middleware","text":"","title":"Middleware"},{"location":"reference/middleware/#loginpasswordmaxtrymiddleware-pro-only","text":"If you want limit login failed ip with error password, you can use LoginPasswordMaxTryMiddleware . from starlette.middleware.base import BaseHTTPMiddleware from fastapi_admin import middlewares from fastapi_admin.app import app as admin_app admin_app . add_middleware ( BaseHTTPMiddleware , dispatch = middlewares . LoginPasswordMaxTryMiddleware ( max_times = 3 , after_seconds = 3600 )) After that, user can try max 3 times password, if all failed, the ip will be limited 3600 seconds.","title":"LoginPasswordMaxTryMiddleware (\ud83d\udc97 Pro only)"},{"location":"reference/notification/","text":"Notification (\ud83d\udc97 Pro only) FastAPI-Admin provide a notification center implement by websocket. Usage You should add it to providers to enable it. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.notification import NotificationProvider app = FastAPI () provider = NotificationProvider () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ provider ] ) There are two ways to send notifications. One is call await provider.broadcast() directly. data = { \"title\" : \"test\" , \"content\" : \"//avatars.githubusercontent.com/u/13377178?v=4\" , \"image\" : \"https://avatars.githubusercontent.com/u/13377178?v=4\" , \"link\" : \"https://fastapi-admin-docs.long2ice.cn\" } await provider . broadcast ( data ) If you want to send notifications out of application, another way is use http api. import requests requests . post ( 'http://localhost:8000/admin/notification' , json = data )","title":"Notification (\ud83d\udc97 Pro only)"},{"location":"reference/notification/#notification-pro-only","text":"FastAPI-Admin provide a notification center implement by websocket.","title":"Notification (\ud83d\udc97 Pro only)"},{"location":"reference/notification/#usage","text":"You should add it to providers to enable it. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.notification import NotificationProvider app = FastAPI () provider = NotificationProvider () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ provider ] ) There are two ways to send notifications. One is call await provider.broadcast() directly. data = { \"title\" : \"test\" , \"content\" : \"//avatars.githubusercontent.com/u/13377178?v=4\" , \"image\" : \"https://avatars.githubusercontent.com/u/13377178?v=4\" , \"link\" : \"https://fastapi-admin-docs.long2ice.cn\" } await provider . broadcast ( data ) If you want to send notifications out of application, another way is use http api. import requests requests . post ( 'http://localhost:8000/admin/notification' , json = data )","title":"Usage"},{"location":"reference/permission/","text":"Permission Control (\ud83d\udc97 Pro only) There are for kinds of permissions builtin. The Link has only read , and Model resource has all kinds of permissions. class Permission ( str , Enum ): create = \"create\" delete = \"delete\" update = \"update\" read = \"read\" If an admin user has no read for a resource, it won't show the menu in dashboard. The update / delete / create permissions is also related with the actions display. Usage First, inherit and add the necessary models to your models.py . from fastapi_admin.models import ( AbstractPermission , AbstractResource , AbstractRole , ) class Resource ( AbstractResource ): pass class Permission ( AbstractPermission ): pass class Role ( AbstractRole ): pass Then also add PermissionProvider to providers. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.permission import PermissionProvider app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ PermissionProvider ( Admin , Resource , Permission , ), ] ) That's the all code, after that, all resources and permissions will autofill in database, what you need do is just add role and relate admins in dashboard and configure permissions yourself.","title":"Permission Control (\ud83d\udc97 Pro only)"},{"location":"reference/permission/#permission-control-pro-only","text":"There are for kinds of permissions builtin. The Link has only read , and Model resource has all kinds of permissions. class Permission ( str , Enum ): create = \"create\" delete = \"delete\" update = \"update\" read = \"read\" If an admin user has no read for a resource, it won't show the menu in dashboard. The update / delete / create permissions is also related with the actions display.","title":"Permission Control (\ud83d\udc97 Pro only)"},{"location":"reference/permission/#usage","text":"First, inherit and add the necessary models to your models.py . from fastapi_admin.models import ( AbstractPermission , AbstractResource , AbstractRole , ) class Resource ( AbstractResource ): pass class Permission ( AbstractPermission ): pass class Role ( AbstractRole ): pass Then also add PermissionProvider to providers. from fastapi import FastAPI from fastapi_admin.app import app as admin_app from fastapi_admin.providers.permission import PermissionProvider app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await admin_app . configure ( providers = [ PermissionProvider ( Admin , Resource , Permission , ), ] ) That's the all code, after that, all resources and permissions will autofill in database, what you need do is just add role and relate admins in dashboard and configure permissions yourself.","title":"Usage"},{"location":"reference/resource/","text":"Resource There are three kinds of resources, Link , Model and Dropdown , all are inherited from fastapi_admin.resources.Resource . You should use app.register decorator to register a resource. And all icons define come from https://tabler-icons.io and https://fontawesome.com . Link Link just display a menu with a link. from fastapi_admin.app import app from fastapi_admin.resources import Link @app . register class Home ( Link ): label = \"Home\" icon = \"fas fa-home\" url = \"/admin\" Field Field is the object that Model use, which define how a field display and input. @app . register class AdminResource ( Model ): fields = [ \"id\" , \"username\" , Field ( name = \"password\" , label = \"Password\" , display = displays . InputOnly (), input_ = inputs . Password (), ), Field ( name = \"email\" , label = \"Email\" , input_ = inputs . Email ()), Field ( name = \"avatar\" , label = \"Avatar\" , display = displays . Image ( width = \"40\" ), input_ = inputs . Image ( null = True , upload = upload ), ), \"created_at\" , ] You can pass str or Field to fields , if is str , it will try to auto mapping display and input widget, such as displays.Boolean for BooleanField , inputs.Date for DateField . All kind of widgets you can find in Display and Input . Action The Action define the action display in every end of row, and bulk action for every model. By default there are two actions, Which are delete action and edit action, and one bulk action, which allow delete rows in bulk. To use that, you should override the get_actions and get_bulk_actions . The following example hide all default actions with return empty list. @app . register class AdminResource ( Model ): async def get_actions ( self , request : Request ) -> List [ Action ]: return [] async def get_bulk_actions ( self , request : Request ) -> List [ Action ]: return [] ComputeField The class that model.get_compute_fields used. class ComputeField ( BaseModel ): label : str name : str async def get_value ( self , request : Request , obj : dict ): return obj . get ( self . name ) What you need to do is just override the get_value method. class RestDays ( ComputeField ): async def get_value ( self , request : Request , obj : dict ): days = ( obj . get ( self . name ) - date . today ()) . days return days if days >= 0 else 0 ToolbarAction The class that mode.get_toolbar_actions used. class ToolbarAction ( Action ): class_ : Optional [ str ] Model Model is the core resource, which make TortoiseORM model as a menu and display a data table with create, update, and delete. @app . register class AdminResource ( Model ): label = \"Admin\" model = Admin page_pre_title = \"admin list\" page_title = \"Admin Model\" filters = [ filters . Search ( name = \"username\" , label = \"Name\" , search_mode = \"contains\" , placeholder = \"Search for username\" , ), filters . Date ( name = \"created_at\" , label = \"CreatedAt\" ), ] Configuration label : The menu name display. model : TortoiseORM model. page_pre_title : Show page pre title in content. page_title : Show page title in content. filters : Define filters for the model, which will display filter inputs in table above, all kinds of filters you can find in Filter . row_attributes You can add extra attributes to each row by use row_attributes . @app . register class ConfigResource ( Model ): async def row_attributes ( self , request : Request , obj : dict ) -> dict : if obj . get ( \"status\" ) == enums . Status . on : return { \"class\" : \"bg-green text-white\" } return await super () . row_attributes ( request , obj ) The example above will add the css class = \"bg-green text-white\" for the row which status = enums.Status.on . column_attributes You can add extra attributes to each column by use column_attributes . @app . register class LogResource ( Model ): async def column_attributes ( self , request : Request , field : Field ) -> dict : if field . name == \"content\" : return { \"class\" : \"w-50\" } return await super () . column_attributes ( request , field ) The example above will add the css class = \"w-50\" for the column which content . cell_attributes Same as row_attributes but for the cell, you can add extra attributes to cell depends on the row object and column field. @app . register class AdminResource ( Model ): async def cell_attributes ( self , request : Request , obj : dict , field : Field ) -> dict : if field . name == \"id\" : return { \"class\" : \"bg-danger text-white\" } return await super () . cell_attributes ( request , obj , field ) get_compute_fields In some cases we need show some extra fields which are computed from other fields, you can use get_compute_fields . @app . register class SponsorResource ( Model ): async def get_compute_fields ( self , request : Request ) -> List [ ComputeField ]: return [ RestDays ( name = \"invalid_date\" , label = \"Days Remaining\" )] get_toolbar_actions Show toolbar actions top right of the table. @app . register class CategoryResource ( Model ): async def get_toolbar_actions ( self , request : Request ) -> List [ ToolbarAction ]: actions = await super () . get_toolbar_actions ( request ) actions . append ( import_export_provider . import_action ) actions . append ( import_export_provider . export_action ) return actions Dropdown The dropdown resource just contains Link and Model resource, and which can be nested. @app . register class Content ( Dropdown ): label = \"Content\" icon = \"fas fa-bars\" resources = [ ProductResource , CategoryResource ]","title":"Resource"},{"location":"reference/resource/#resource","text":"There are three kinds of resources, Link , Model and Dropdown , all are inherited from fastapi_admin.resources.Resource . You should use app.register decorator to register a resource. And all icons define come from https://tabler-icons.io and https://fontawesome.com .","title":"Resource"},{"location":"reference/resource/#link","text":"Link just display a menu with a link. from fastapi_admin.app import app from fastapi_admin.resources import Link @app . register class Home ( Link ): label = \"Home\" icon = \"fas fa-home\" url = \"/admin\"","title":"Link"},{"location":"reference/resource/#field","text":"Field is the object that Model use, which define how a field display and input. @app . register class AdminResource ( Model ): fields = [ \"id\" , \"username\" , Field ( name = \"password\" , label = \"Password\" , display = displays . InputOnly (), input_ = inputs . Password (), ), Field ( name = \"email\" , label = \"Email\" , input_ = inputs . Email ()), Field ( name = \"avatar\" , label = \"Avatar\" , display = displays . Image ( width = \"40\" ), input_ = inputs . Image ( null = True , upload = upload ), ), \"created_at\" , ] You can pass str or Field to fields , if is str , it will try to auto mapping display and input widget, such as displays.Boolean for BooleanField , inputs.Date for DateField . All kind of widgets you can find in Display and Input .","title":"Field"},{"location":"reference/resource/#action","text":"The Action define the action display in every end of row, and bulk action for every model. By default there are two actions, Which are delete action and edit action, and one bulk action, which allow delete rows in bulk. To use that, you should override the get_actions and get_bulk_actions . The following example hide all default actions with return empty list. @app . register class AdminResource ( Model ): async def get_actions ( self , request : Request ) -> List [ Action ]: return [] async def get_bulk_actions ( self , request : Request ) -> List [ Action ]: return []","title":"Action"},{"location":"reference/resource/#computefield","text":"The class that model.get_compute_fields used. class ComputeField ( BaseModel ): label : str name : str async def get_value ( self , request : Request , obj : dict ): return obj . get ( self . name ) What you need to do is just override the get_value method. class RestDays ( ComputeField ): async def get_value ( self , request : Request , obj : dict ): days = ( obj . get ( self . name ) - date . today ()) . days return days if days >= 0 else 0","title":"ComputeField"},{"location":"reference/resource/#toolbaraction","text":"The class that mode.get_toolbar_actions used. class ToolbarAction ( Action ): class_ : Optional [ str ]","title":"ToolbarAction"},{"location":"reference/resource/#model","text":"Model is the core resource, which make TortoiseORM model as a menu and display a data table with create, update, and delete. @app . register class AdminResource ( Model ): label = \"Admin\" model = Admin page_pre_title = \"admin list\" page_title = \"Admin Model\" filters = [ filters . Search ( name = \"username\" , label = \"Name\" , search_mode = \"contains\" , placeholder = \"Search for username\" , ), filters . Date ( name = \"created_at\" , label = \"CreatedAt\" ), ]","title":"Model"},{"location":"reference/resource/#configuration","text":"label : The menu name display. model : TortoiseORM model. page_pre_title : Show page pre title in content. page_title : Show page title in content. filters : Define filters for the model, which will display filter inputs in table above, all kinds of filters you can find in Filter .","title":"Configuration"},{"location":"reference/resource/#row_attributes","text":"You can add extra attributes to each row by use row_attributes . @app . register class ConfigResource ( Model ): async def row_attributes ( self , request : Request , obj : dict ) -> dict : if obj . get ( \"status\" ) == enums . Status . on : return { \"class\" : \"bg-green text-white\" } return await super () . row_attributes ( request , obj ) The example above will add the css class = \"bg-green text-white\" for the row which status = enums.Status.on .","title":"row_attributes"},{"location":"reference/resource/#column_attributes","text":"You can add extra attributes to each column by use column_attributes . @app . register class LogResource ( Model ): async def column_attributes ( self , request : Request , field : Field ) -> dict : if field . name == \"content\" : return { \"class\" : \"w-50\" } return await super () . column_attributes ( request , field ) The example above will add the css class = \"w-50\" for the column which content .","title":"column_attributes"},{"location":"reference/resource/#cell_attributes","text":"Same as row_attributes but for the cell, you can add extra attributes to cell depends on the row object and column field. @app . register class AdminResource ( Model ): async def cell_attributes ( self , request : Request , obj : dict , field : Field ) -> dict : if field . name == \"id\" : return { \"class\" : \"bg-danger text-white\" } return await super () . cell_attributes ( request , obj , field )","title":"cell_attributes"},{"location":"reference/resource/#get_compute_fields","text":"In some cases we need show some extra fields which are computed from other fields, you can use get_compute_fields . @app . register class SponsorResource ( Model ): async def get_compute_fields ( self , request : Request ) -> List [ ComputeField ]: return [ RestDays ( name = \"invalid_date\" , label = \"Days Remaining\" )]","title":"get_compute_fields"},{"location":"reference/resource/#get_toolbar_actions","text":"Show toolbar actions top right of the table. @app . register class CategoryResource ( Model ): async def get_toolbar_actions ( self , request : Request ) -> List [ ToolbarAction ]: actions = await super () . get_toolbar_actions ( request ) actions . append ( import_export_provider . import_action ) actions . append ( import_export_provider . export_action ) return actions","title":"get_toolbar_actions"},{"location":"reference/resource/#dropdown","text":"The dropdown resource just contains Link and Model resource, and which can be nested. @app . register class Content ( Dropdown ): label = \"Content\" icon = \"fas fa-bars\" resources = [ ProductResource , CategoryResource ]","title":"Dropdown"},{"location":"reference/widget/display/","text":"Display Display Default display, which will just display the value with any change. DatetimeDisplay Will display the value by the giving format, default is %Y-%m-%d %H:%M:%S . class DatetimeDisplay ( Display ): def __init__ ( self , format_ : str = constants . DATETIME_FORMAT ): DateDisplay Will display the value by the giving format, default is %Y-%m-%d . class DatetimeDisplay ( Display ): def __init__ ( self , format_ : str = constants . DATETIME_FORMAT ): InputOnly Which is a special display widget, for that will not display in table content, but display in edit page only. Boolean Will display the value in bool mode. Image Will display the value as a image. Json Will display the value with json highlight.","title":"Display"},{"location":"reference/widget/display/#display","text":"","title":"Display"},{"location":"reference/widget/display/#display_1","text":"Default display, which will just display the value with any change.","title":"Display"},{"location":"reference/widget/display/#datetimedisplay","text":"Will display the value by the giving format, default is %Y-%m-%d %H:%M:%S . class DatetimeDisplay ( Display ): def __init__ ( self , format_ : str = constants . DATETIME_FORMAT ):","title":"DatetimeDisplay"},{"location":"reference/widget/display/#datedisplay","text":"Will display the value by the giving format, default is %Y-%m-%d . class DatetimeDisplay ( Display ): def __init__ ( self , format_ : str = constants . DATETIME_FORMAT ):","title":"DateDisplay"},{"location":"reference/widget/display/#inputonly","text":"Which is a special display widget, for that will not display in table content, but display in edit page only.","title":"InputOnly"},{"location":"reference/widget/display/#boolean","text":"Will display the value in bool mode.","title":"Boolean"},{"location":"reference/widget/display/#image","text":"Will display the value as a image.","title":"Image"},{"location":"reference/widget/display/#json","text":"Will display the value with json highlight.","title":"Json"},{"location":"reference/widget/filter/","text":"Filter The filter define how to filter the model resource. Search Search by a field. @app . register class AdminResource ( Model ): filters = [ filters . Search ( name = \"username\" , label = \"Name\" , search_mode = \"contains\" , placeholder = \"Search for username\" , ), ] search_mode choices: equal , contains , icontains , startswith , istartswith , endswith , iendswith , iexact , search Datetime Datetime field filter. @app . register class AdminResource ( Model ): filters = [ filters . Datetime ( name = \"created_at\" , label = \"CreatedAt\" ), ] Date Date field filter. @app . register class AdminResource ( Model ): filters = [ filters . Date ( name = \"created_at\" , label = \"CreatedAt\" ), ] Select Select filter. Enum Like select filter but choice from a enum class. class ProductResource ( Model ): filters = [ filters . Enum ( enum = enums . ProductType , name = \"type\" , label = \"ProductType\" ), ] ForeignKey Like select filter but choice from a ForeignKey model.","title":"Filter"},{"location":"reference/widget/filter/#filter","text":"The filter define how to filter the model resource.","title":"Filter"},{"location":"reference/widget/filter/#search","text":"Search by a field. @app . register class AdminResource ( Model ): filters = [ filters . Search ( name = \"username\" , label = \"Name\" , search_mode = \"contains\" , placeholder = \"Search for username\" , ), ] search_mode choices: equal , contains , icontains , startswith , istartswith , endswith , iendswith , iexact , search","title":"Search"},{"location":"reference/widget/filter/#datetime","text":"Datetime field filter. @app . register class AdminResource ( Model ): filters = [ filters . Datetime ( name = \"created_at\" , label = \"CreatedAt\" ), ]","title":"Datetime"},{"location":"reference/widget/filter/#date","text":"Date field filter. @app . register class AdminResource ( Model ): filters = [ filters . Date ( name = \"created_at\" , label = \"CreatedAt\" ), ]","title":"Date"},{"location":"reference/widget/filter/#select","text":"Select filter.","title":"Select"},{"location":"reference/widget/filter/#enum","text":"Like select filter but choice from a enum class. class ProductResource ( Model ): filters = [ filters . Enum ( enum = enums . ProductType , name = \"type\" , label = \"ProductType\" ), ]","title":"Enum"},{"location":"reference/widget/filter/#foreignkey","text":"Like select filter but choice from a ForeignKey model.","title":"ForeignKey"},{"location":"reference/widget/input/","text":"Input DisplayOnly Which is a special display widget, for that will display in table content only but not in edit page. Text Common html input with type=text . Select Html select. ForeignKey Like select but options come from a ForeignKey model. ManyToMany Display a multiple select. Enum Like select but options come from a enum class. Email Html email input. Json Display a json editor widget, based on jsoneditor . TextArea Html textarea input. Editor Based on quilljs , display a rich editor input. DateTime Html datetime input. Date Html date input. File Html file input. Image Like file but with image preview. Radio Html Radio input. RadioEnum Like radio but choices from a enum class. Switch Display a switch, useful for bool field. Password Html password input. Number Html number input. Color Html color input.","title":"Input"},{"location":"reference/widget/input/#input","text":"","title":"Input"},{"location":"reference/widget/input/#displayonly","text":"Which is a special display widget, for that will display in table content only but not in edit page.","title":"DisplayOnly"},{"location":"reference/widget/input/#text","text":"Common html input with type=text .","title":"Text"},{"location":"reference/widget/input/#select","text":"Html select.","title":"Select"},{"location":"reference/widget/input/#foreignkey","text":"Like select but options come from a ForeignKey model.","title":"ForeignKey"},{"location":"reference/widget/input/#manytomany","text":"Display a multiple select.","title":"ManyToMany"},{"location":"reference/widget/input/#enum","text":"Like select but options come from a enum class.","title":"Enum"},{"location":"reference/widget/input/#email","text":"Html email input.","title":"Email"},{"location":"reference/widget/input/#json","text":"Display a json editor widget, based on jsoneditor .","title":"Json"},{"location":"reference/widget/input/#textarea","text":"Html textarea input.","title":"TextArea"},{"location":"reference/widget/input/#editor","text":"Based on quilljs , display a rich editor input.","title":"Editor"},{"location":"reference/widget/input/#datetime","text":"Html datetime input.","title":"DateTime"},{"location":"reference/widget/input/#date","text":"Html date input.","title":"Date"},{"location":"reference/widget/input/#file","text":"Html file input.","title":"File"},{"location":"reference/widget/input/#image","text":"Like file but with image preview.","title":"Image"},{"location":"reference/widget/input/#radio","text":"Html Radio input.","title":"Radio"},{"location":"reference/widget/input/#radioenum","text":"Like radio but choices from a enum class.","title":"RadioEnum"},{"location":"reference/widget/input/#switch","text":"Display a switch, useful for bool field.","title":"Switch"},{"location":"reference/widget/input/#password","text":"Html password input.","title":"Password"},{"location":"reference/widget/input/#number","text":"Html number input.","title":"Number"},{"location":"reference/widget/input/#color","text":"Html color input.","title":"Color"}]}